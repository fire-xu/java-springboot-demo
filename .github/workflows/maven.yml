# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java Deploy with Maven

on:
  push:
    branches: [ main ] 
  pull_request:
    branches: [ main ]

   
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
 #     - uses: webfactory/ssh-agent@v0.4.1
 #       with:
#            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Set up JDK 1.8
 # 这里使用java8的环境, 其他项目在github action中找到对应的语言环境就行
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
 # 这里的步骤是用于缓存本地的mvn仓库，如果没有这一步，每次部署时都要重启下载依赖包。
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2     
      - name: Build with Maven
 # 这里maven的打包命令, 其他项目修改为对应的打包命令，并替换k8s.yaml文件中的镜像，用于k8s的部署
        run:  |
            git clone ${{ secrets.GOGS_REPO }}
            ls -l
            cd test-demo
            sed -i "s/<BUILD_TAG>/$GITHUB_RUN_NUMBER/" k8s.yaml
            cat k8s.yaml
            mvn -B clean package --file pom.xml -Dmaven.test.skip=true
       #     mvn sonar:sonar -Dsonar.host.url=${{ secrets.SONAR_ADD }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}  
  # 这里开始push镜像，所有的敏设感内容，可以在本仓库设置里，设置秘钥变量替换
      - name: Push Docker
        run: |
          cat >> /etc/hosts <<EOF
          101.227.90.187 harbor.analyticservice.com 
          EOF
          ls -l
          cat /etc/hosts
          cd test-demo
          docker login --username=${{ secrets.DOCKER_NAME }} --password ${{ secrets.DOCKER_PASS }}
          docker build . -t ${{ secrets.REGISTRY}}:$GITHUB_RUN_NUMBER
          docker push ${{ secrets.REGISTRY}}:$GITHUB_RUN_NUMBER
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            password: ${{ secrets.PWD }}
            port: ${{ secrets.PORT }}
            source: "test-demo/k8s.yaml,test-demo/ingress.yaml" 
            target: "/home"   
      - name: Deloy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PWD }}
          port: ${{ secrets.PORT }}         
          script: |
                    cd /home/test-demo/                       
                    kubectl apply -f k8s.yaml --record 
                    kubectl apply -f ingress.yaml --record
  #  上面我直接用k8s部署， 如果用docker部署，可以按下面的步骤，最后在docker run 一下就好了                 
         #docker stop $(docker ps --filter ancestor=${{ secrets.REGISTRY }} -q)               
         #docker rm -f $(docker ps -a --filter ancestor=${{ secrets.REGISTRY }}:latest -q)
         # docker rmi -f $(docker images  ${{ secrets.REGISTRY }}:latest -q)
         #docker login --username=${{ secrets.DOCKER_NAME }} --password ${{ secrets.DOCKER_PASS }}
      
       
